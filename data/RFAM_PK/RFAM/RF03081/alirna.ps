%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.11
%%CreationDate: Sat Nov 28 23:38:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AAAAAGUGGAGACCAGA_AACCACU_U_A___A_A_A_AAC_GGGGCG_AA_A_CC_GAAAAGCCAUAUGAGU_A_G_G_AAAAAA_\
) def
/coor [
[39.34058762 202.06184387]
[27.75791740 194.21923828]
[17.17801666 185.06880188]
[7.74774027 174.73756409]
[-0.40201077 163.36891174]
[-13.56719589 170.55764771]
[-26.73237991 177.74638367]
[-39.89756393 184.93511963]
[-53.06275177 192.12385559]
[-52.74680328 207.42610168]
[-59.58872986 221.11721802]
[-72.01631165 230.05107117]
[-87.17376709 232.17475891]
[-101.57803345 227.00024414]
[-111.91912079 215.71659851]
[-115.82070923 200.91671753]
[-112.38625336 186.00152588]
[-102.40496063 174.39840698]
[-88.17046356 168.77368164]
[-72.95374298 170.41986084]
[-60.25148392 178.95866394]
[-47.08629990 171.76992798]
[-33.92111588 164.58119202]
[-20.75592995 157.39245605]
[-7.59074545 150.20372009]
[-13.42076397 135.09861755]
[-17.14144325 119.34075928]
[-18.68358612 103.22322083]
[-18.01851463 87.04573059]
[-15.15859509 71.10916138]
[-10.15701675 55.70988464]
[-3.10679674 41.13429642]
[5.86094999 27.65345955]
[16.57944489 15.51808643]
[28.84935379 4.95386314]
[42.44248199 -3.84274125]
[57.10603714 -10.70813274]
[72.56731415 -15.51463223]
[88.53876495 -18.17285156]
[104.72336578 -18.63335228]
[120.82012939 -16.88757324]
[136.52967834 -12.96798134]
[151.55989075 -6.94746876]
[165.63119507 1.06199706]
[178.48193359 10.91145992]
[189.08854675 0.30485806]
[199.69514465 -10.30174351]
[193.53770447 -24.17439079]
[192.81134033 -39.33476257]
[197.61430359 -53.73254013]
[207.29702759 -65.42054749]
[220.54998779 -72.81806946]
[235.58084106 -74.92465210]
[250.35679626 -71.45541382]
[262.87951660 -62.87951660]
[271.45541382 -50.35680008]
[274.92465210 -35.58084488]
[272.81805420 -20.54998589]
[265.42053223 -7.29702139]
[253.73254395 2.38569522]
[239.33476257 7.18865538]
[224.17439270 6.46229839]
[210.30174255 0.30485806]
[199.69514465 10.91145992]
[189.08854675 21.51806068]
[197.70063782 32.54061127]
[204.95657349 44.49954224]
[210.75564575 57.22885513]
[215.01734924 70.55186462]
[217.68252563 84.28363037]
[218.71420288 98.23355103]
[218.09803772 112.20799255]
[215.84259033 126.01298523]
[211.97917175 139.45689392]
[206.56141663 152.35310364]
[199.66450500 164.52262878]
[191.38417053 175.79653931]
[181.83537292 186.01834106]
[171.15065002 195.04614258]
[159.47830200 202.75463867]
[146.98034668 209.03681946]
[133.83027649 213.80551147]
[120.21062469 216.99450684]
[106.31043243 218.55952454]
[92.32263947 218.47886658]
[78.44142151 216.75363159]
[64.85945129 213.40777588]
] def
/pairs [
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[45 65]
[46 64]
[47 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 25 10 gmark
5 cmark
25 cmark
6 24 4 gmark
6 cmark
24 cmark
7 23 1 gmark
7 cmark
23 cmark
8 cmark
22 cmark
9 21 1 gmark
45 65 1 gmark
45 cmark
65 cmark
46 64 1 gmark
46 cmark
64 cmark
47 63 2 gmark
47 cmark
63 cmark

% End Annotations
% show it
showpage
end
%%EOF
