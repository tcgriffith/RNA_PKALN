%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.11
%%CreationDate: Sat Nov 28 23:37:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
_CCGCAGCCAGG_GCGG__CCC_________GUAG___________GGG_AAAG__CCUGGACGCG_GAU_AGCCGG_UAGUG_CCGCG_UUA_CGAAAAAACA_CCGGCAGCC\
) def
/coor [
[87.98934937 163.27062988]
[74.12852478 158.97537231]
[61.58124542 151.68585205]
[50.98454285 141.77215576]
[42.87643433 129.73762512]
[37.66857529 116.19326019]
[35.62538528 101.82674408]
[36.85059357 87.36747742]
[22.58474541 82.73222351]
[8.31889725 78.09696960]
[-5.94694996 73.46171570]
[-20.21279716 68.82646179]
[-29.57684517 80.72351837]
[-42.42214584 88.68405914]
[-57.18818665 91.76371002]
[-72.08885956 89.60967255]
[-85.32852173 82.50101471]
[-95.31834412 71.31272125]
[-100.86702728 57.40800476]
[-101.32280731 42.47222137]
[-115.58865356 37.83696747]
[-129.85450745 33.20171356]
[-137.80165100 46.01211166]
[-148.58407593 56.54788208]
[-161.57493591 64.19649506]
[-176.01892090 68.51325989]
[-191.07630920 69.24721527]
[-205.87165833 66.35568237]
[-219.54479980 60.00677872]
[-231.30079651 50.56961823]
[-240.45616150 38.59286118]
[-246.47862244 24.77282333]
[-249.01803589 9.91298389]
[-247.92675781 -5.12272549]
[-243.26824951 -19.46014977]
[-235.31333923 -32.26572800]
[-224.52452087 -42.79496002]
[-211.52903748 -50.43569565]
[-197.08242798 -54.74370575]
[-182.02459717 -55.46852875]
[-167.23100281 -52.56803131]
[-153.56170654 -46.21083832]
[-141.81144714 -36.76654816]
[-132.66334534 -24.78424263]
[-126.64926147 -10.96055698]
[-124.11885834 3.90081906]
[-125.21924591 18.93586349]
[-110.95339966 23.57111931]
[-96.68755341 28.20637321]
[-87.53978729 16.39097214]
[-74.87782288 8.40325165]
[-60.21956635 5.22360563]
[-45.33009720 7.25465822]
[-32.00908279 14.27039909]
[-21.87327766 25.44115067]
[-16.16030121 39.43164444]
[-15.57754326 54.56061172]
[-1.31169522 59.19586945]
[12.95415211 63.83112335]
[27.22000122 68.46637726]
[41.48584747 73.10163116]
[49.55955505 59.96014786]
[60.52636719 49.11522293]
[73.75726318 41.18888855]
[88.49335480 36.63577271]
[103.88943481 35.71702957]
[119.06243134 38.48535156]
[133.14205933 44.78195953]
[145.32077026 54.24570084]
[154.90002441 66.33376312]
[161.33038330 80.35281372]
[164.24302673 95.49876404]
[163.47090149 110.90289307]
[177.85803223 115.14675140]
[192.24517822 119.39060211]
[206.63230896 123.63446045]
[221.01943970 127.87831879]
[232.10433960 120.08526611]
[245.45893860 120.14282227]
[256.15838623 127.80370331]
[260.38769531 140.05830383]
[274.65353394 144.69355774]
[283.34158325 132.32388306]
[295.29071045 123.06590271]
[309.43838501 117.74285889]
[324.52661133 116.82806396]
[339.21374512 120.40285492]
[352.19384766 128.14938354]
[362.31271362 139.37879944]
[368.67056274 153.09262085]
[370.70211792 168.07142639]
[368.22665405 182.98327637]
[361.46435547 196.50225830]
[351.01651001 207.42625427]
[337.81210327 214.78390503]
[323.02526855 217.92098999]
[307.97085571 216.55854797]
[293.98751831 210.81771851]
[282.31857300 201.20899963]
[274.00167847 188.58677673]
[269.77633667 174.07341003]
[270.01828003 158.95941162]
[255.75242615 154.32415771]
[241.18103027 162.59742737]
[224.79364014 157.73968506]
[216.77558899 142.26545715]
[202.38844299 138.02159119]
[188.00131226 133.77774048]
[173.61418152 129.53388977]
[159.22703552 125.29003143]
[152.06130981 137.90841675]
[142.25234985 148.60214233]
[130.29815674 156.82824707]
[116.80568695 162.16909790]
] def
/pairs [
[8 61]
[9 60]
[10 59]
[11 58]
[12 57]
[20 49]
[21 48]
[22 47]
[73 110]
[74 109]
[75 108]
[76 107]
[77 106]
[81 103]
[82 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
8 61 1 gmark
8 cmark
61 cmark
9 cmark
60 cmark
10 cmark
59 cmark
11 58 1 gmark
11 cmark
58 cmark
12 57 3 gmark
12 cmark
57 cmark
20 49 25 gmark
20 cmark
49 cmark
21 48 2 gmark
21 cmark
48 cmark
22 cmark
47 cmark
73 110 1 gmark
73 cmark
110 cmark
74 109 2 gmark
74 cmark
109 cmark
75 cmark
108 cmark
76 107 1 gmark
76 cmark
107 cmark
77 106 1 gmark
77 cmark
106 cmark
81 103 2 gmark
103 cmark
82 cmark
102 cmark

% End Annotations
% show it
showpage
end
%%EOF
