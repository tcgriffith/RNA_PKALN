%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.11
%%CreationDate: Sat Nov 28 23:37:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
_CCGCAGCCAGG_GC_GG__C_C_C__________________GUAA__G___G_G_AAAG_C__CUGGAC_GC_GGAU_AGCCGG_UAGUG_CCGCG__UUA_C_GAAAAAAC_A_CCGGCAGCC\
) def
/coor [
[199.85385132 205.15888977]
[185.65795898 200.26206970]
[172.90165710 192.32507324]
[162.22639465 181.74325562]
[154.16981506 169.04502869]
[149.13871765 154.86549377]
[147.38842773 139.91474915]
[149.00994873 124.94222260]
[134.83862305 120.02557373]
[120.66728973 115.10893250]
[106.49595642 110.19229126]
[92.20735168 105.62767029]
[84.30899048 116.64215088]
[73.40146637 124.64891815]
[60.56975937 128.86914062]
[47.08481598 128.89979553]
[34.27764893 124.75206757]
[23.40795517 116.84886932]
[15.54021931 105.98175049]
[11.43948078 93.23163605]
[11.49695301 79.86133575]
[-4.07693720 82.64782715]
[-13.56499290 71.16627502]
[-33.07557678 75.94411469]
[-45.24775696 61.00153732]
[-52.81118774 74.04216766]
[-63.27617264 84.89331818]
[-76.03428650 92.92412567]
[-90.34379578 97.66768646]
[-105.37276459 98.84822083]
[-120.24742126 96.39709473]
[-134.10296631 90.45680237]
[-146.13388062 81.37271881]
[-155.64068604 69.67296600]
[-162.07066345 56.03776550]
[-165.05000305 41.25984192]
[-164.40547180 26.19836617]
[-160.17454529 11.72899437]
[-152.60321045 -1.30704367]
[-142.13165283 -12.15185070]
[-129.36866760 -20.17492294]
[-115.05628204 -24.90981102]
[-100.02660370 -26.08123398]
[-85.15343475 -23.62108421]
[-71.30149078 -17.67239571]
[-59.27608871 -8.58101654]
[-49.77637863 3.12449455]
[-43.35466385 16.76359367]
[-40.38428879 31.54331970]
[-41.03795242 46.60440063]
[-32.43350983 40.85311127]
[-21.86300468 40.84546280]
[-12.88235092 46.82902908]
[-8.64834881 56.99494171]
[5.91191292 53.85678101]
[16.41359711 65.69001007]
[27.09886360 53.04076767]
[41.83448410 45.40867233]
[58.40369034 43.97321320]
[74.30188751 48.97930145]
[87.11524963 59.69604111]
[94.88719177 74.52328491]
[96.41715240 91.23052979]
[101.57852936 89.77693939]
[107.17573547 91.38074493]
[111.41259766 96.02095795]
[125.58393097 100.93759918]
[139.75526428 105.85424805]
[153.92658997 110.77088928]
[161.92652893 98.01131439]
[172.56027222 87.35710907]
[185.29222107 79.34035492]
[199.48213196 74.36037445]
[214.41725159 72.66390228]
[229.34822083 74.33281708]
[243.52656555 79.28023529]
[256.24224854 87.25498199]
[266.85925293 97.85438538]
[274.84738159 110.54457855]
[279.80877686 124.68740845]
[281.49755859 139.57250977]
[279.83230591 154.45300293]
[294.00366211 159.36964417]
[308.17498779 164.28628540]
[322.34631348 169.20292664]
[336.51763916 174.11956787]
[349.23178101 165.42146301]
[364.45181274 165.87239075]
[376.34722900 175.08995056]
[380.48446655 189.37355042]
[394.65579224 194.29019165]
[403.25857544 181.88476562]
[414.89001465 172.26124573]
[428.68701172 166.13377380]
[443.62570190 163.95704651]
[458.59753418 165.89259338]
[472.49154663 171.79678345]
[484.27664185 181.23147583]
[493.07836914 193.49658203]
[498.24349976 207.68191528]
[499.38879395 222.73484802]
[496.42929077 237.53836060]
[489.58453369 250.99391174]
[479.36248779 262.10302734]
[466.52169800 270.04132080]
[452.01501465 274.21975708]
[436.91897583 274.32821655]
[422.35375977 270.35867310]
[409.40023804 262.60571289]
[399.01962280 251.64462280]
[391.98220825 238.28881836]
[388.81027222 223.52937317]
[389.73916626 208.46153259]
[375.56781006 203.54489136]
[363.47320557 212.19696045]
[348.42504883 212.06663513]
[336.19613647 202.99433899]
[331.60098267 188.29090881]
[317.42965698 183.37425232]
[303.25833130 178.45761108]
[289.08700562 173.54096985]
[274.91567993 168.62432861]
[267.00708008 181.33872986]
[256.46224976 191.97946167]
[243.80778503 200.01058960]
[229.67658997 205.02664185]
] def
/pairs [
[8 69]
[9 68]
[10 67]
[11 66]
[12 63]
[21 56]
[23 54]
[25 50]
[82 122]
[83 121]
[84 120]
[85 119]
[86 118]
[90 114]
[91 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
8 69 1 gmark
8 cmark
69 cmark
9 cmark
68 cmark
10 cmark
67 cmark
11 66 1 gmark
11 cmark
66 cmark
12 63 4 gmark
12 cmark
63 cmark
21 56 22 gmark
21 cmark
56 cmark
23 54 4 gmark
23 cmark
54 cmark
25 50 3 gmark
25 cmark
50 cmark
82 122 1 gmark
82 cmark
122 cmark
83 121 2 gmark
83 cmark
121 cmark
84 cmark
120 cmark
85 119 1 gmark
85 cmark
119 cmark
86 118 1 gmark
86 cmark
118 cmark
90 114 2 gmark
114 cmark
91 cmark
113 cmark

% End Annotations
% show it
showpage
end
%%EOF
