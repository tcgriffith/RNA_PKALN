%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.11
%%CreationDate: Sat Nov 28 23:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
ACUCGUCUGGGCGAGUAUAAAU_A_G__GCA_U_UAGGCCCAG_AGCGUUCCC______________G________C__________UU__C_A_________GGGGGGGGUUGUA\
) def
/coor [
[99.25189209 136.54284668]
[90.99533081 135.42393494]
[83.20670319 132.46420288]
[76.29074860 127.81745911]
[70.60684967 121.72515869]
[66.45038605 114.50389862]
[51.79513168 117.70132446]
[37.18412399 121.09520721]
[22.57311630 124.48908997]
[7.96210957 127.88298035]
[-6.64889812 131.27685547]
[-21.25990677 134.67074585]
[-21.31979752 149.74035645]
[-24.85395432 164.38981628]
[-31.67178154 177.82907104]
[-41.40560150 189.33340454]
[-53.53048706 198.28236389]
[-67.39254761 204.19335938]
[-82.24423218 206.74761963]
[-97.28459930 205.80738831]
[-111.70254517 201.42337036]
[-124.72052765 193.83201599]
[-135.63650513 183.44267273]
[-143.86178589 170.81565857]
[-148.95280457 156.63192749]
[-150.63497925 141.65638733]
[-148.81762695 126.69664001]
[-143.59873962 112.55945587]
[-135.25976562 100.00724030]
[-124.25041962 89.71690369]
[-111.16441345 82.24340057]
[-96.70746613 77.98976898]
[-81.65922546 77.18540192]
[-66.83120728 79.87367249]
[-53.02309036 85.90960693]
[-40.97951508 94.96769714]
[-31.34997749 106.55944824]
[-24.65379143 120.05973816]
[-10.04278374 116.66585541]
[4.56822443 113.27197266]
[19.17923164 109.87808228]
[33.79024124 106.48419952]
[48.40124893 103.09031677]
[54.28122330 98.45137787]
[63.45000076 99.80703735]
[70.40022278 78.55721283]
[88.42562103 65.33051300]
[110.78173828 65.07588196]
[129.10371399 77.88861084]
[142.65547180 71.45822144]
[156.20722961 65.02783203]
[169.75898743 58.59744644]
[183.31074524 52.16705704]
[168.61454773 49.16337967]
[156.11018372 40.87840652]
[147.61473083 28.51607704]
[144.36270142 13.87284088]
[146.82670593 -0.92339981]
[154.64865112 -13.72250748]
[166.69189453 -22.66456223]
[181.20634460 -26.45013618]
[196.08282471 -24.52912331]
[209.15953064 -17.18067932]
[218.53620911 -5.47265291]
[222.85028076 8.89358807]
[221.47482300 23.83039093]
[214.60971069 37.16719437]
[203.24958801 46.96765900]
[192.00886536 37.03558350]
[188.55158997 22.43944359]
[194.14291382 8.52049732]
[206.73677063 0.37219161]
[221.72459412 0.97628748]
[233.62181091 10.11172485]
[238.07479858 24.43551445]
[233.45404053 38.70606232]
[221.45075989 47.70114136]
[226.92132568 33.66473389]
[235.37855530 21.19785881]
[246.39823914 10.92584419]
[259.42764282 3.36393309]
[273.81320190 -1.10857344]
[288.83334351 -2.26733613]
[303.73471069 -0.05423176]
[317.76977539 5.41973114]
[330.23458862 13.87998104]
[340.50393677 24.90215492]
[348.06271362 37.93338394]
[352.53170776 52.32003021]
[353.68685913 67.34046936]
[351.47012329 82.24127197]
[345.99276733 96.27502441]
[337.52951050 108.73780060]
[326.50482178 119.00447083]
[313.47177124 126.56006622]
[299.08404541 131.02560425]
[284.06332397 132.17707825]
[269.16305542 129.95675659]
[255.13064575 124.47599792]
[242.66992188 116.00970459]
[232.40591431 104.98255920]
[224.85346985 91.94766235]
[220.39143372 77.55885315]
[219.24357605 62.53786469]
[204.25575256 61.93387604]
[189.74111938 65.71881104]
[176.18937683 72.14920044]
[162.63761902 78.57958984]
[149.08586121 85.00997925]
[135.53410339 91.44036865]
[136.54936218 99.71031189]
[135.66531372 107.99531555]
[132.92790222 115.86483002]
[128.47937012 122.90992737]
[122.55090332 128.76449585]
[115.45056152 133.12431335]
] def
/pairs [
[6 45]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[49 110]
[50 109]
[51 108]
[52 107]
[53 106]
[68 105]
[77 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 45 6 gmark
6 cmark
45 cmark
7 43 1 gmark
7 cmark
43 cmark
8 42 1 gmark
8 cmark
42 cmark
9 41 1 gmark
9 cmark
41 cmark
10 cmark
40 cmark
11 39 1 gmark
11 cmark
39 cmark
49 110 4 gmark
49 cmark
110 cmark
50 109 3 gmark
50 cmark
109 cmark
51 108 3 gmark
51 cmark
108 cmark
52 107 3 gmark
52 cmark
107 cmark
53 106 5 gmark
53 cmark
106 cmark
68 105 5 gmark
68 cmark
105 cmark
77 104 11 gmark
77 cmark
104 cmark

% End Annotations
% show it
showpage
end
%%EOF
