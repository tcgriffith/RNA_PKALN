void			AllocateMemory(int x, int y, int num_nodes, TreeNode *nodes);
extern void		CalcAncestralStates(int is_harmonic, double lambda, int debug_status, int condition_pairs, int output_original, int nsamples, char *dataName, char *treeName, char *outName, char *paramName);
void			CalcCijk(double *c_ijk, int n, double **u, double **v);
void			CalcPij(double *c_ijk, int n, double *eigenValues, double v, double r, double **p);
int			CompareChar(char c);
int			ComplexChangeMatrix(double *eigenValues, double *eigvalsImag, complex **Ceigvecs, complex **CinverseEigvecs, int n, double **p, double t, double r);
void			FreeMemory(int num_nodes, TreeNode *nodes);
void			GetAncestralStatesFromPosterior(TreeNode **upPass, int *structure, double *parameters, int nSites, int compNSites, int nNodes);
void			GetAverageLengthToTips(TreeNode **upPass, TreeNode **downPass, int nNodes);
void			GetDoubletMembers(int *pos1, int *pos2, int doublet);
int			GetEigens(int n, double **q, double *eigenValues, double *eigvalsImag, double **eigvecs, double **inverseEigvecs, complex **Ceigvecs, complex **CinverseEigvecs);
void			GetFractionalLikelihoods(TreeNode **downPass, SecondStruct *SS, int *structure, int *dmatrix, int nSites, int compNSites, int nNodes);
void			GetHarmonicMeanOfBranchLengths(int is_harmonic, double lambda, TreeNode **downPass, int nNodes, int nTaxa);
int			GetNumberOfTaxaSitesAndAllocate(char *fileName, int *nTaxa, int *nSites);
long int		GetSeedFromClock(void);
int			GetSumLengthToTipsFromNode(TreeNode *p, TreeNode *target, double *length);
void			IntializeDoubletFracLikelihoodsAtTips(TreeNode *p, int offest, int pos1, int pos2);
void			IntializeSingeltonFracLikelihoodsAtTips(TreeNode *p, int offest, int state);
void			InitializeStemsAndLoops(int nTaxa, int nSites, int *numStems, int *numLoops, int *structure, int condition_pair, int *dmatrix, SecondStruct *SS);
int			IsCanonicalDoublet(int one, int two);
int			IsDoubletChangeCanonicalChange(int which);
int			NucCharToInt(char nuc);
char			NucIntToChar(int nuc);
static double	RandomNumber (long int *seed);
void			ReadDataFile(char *fileName, int nTaxa, int nSites, int *nNodes, int *dmatrix, int *structure, TreeLabels *Names, SecondStruct *SS, int n);
void			ReadParameterFile(char *fileName, double *parameters);
void			ReadTreeFile(char *fileName, TreeStrings *TStrings);
void			ReIndexNodesForTree(TreeNode *p, int *i);
void			ReIntroduceGapsInAncestralMatrix(int nsamples, int nSites, long int *seed, SecondStruct *SS, int *structure, int *anc_seqs);
void			SampleAncestralSequences(TreeNode **downPass, SecondStruct *SS, int *structure, double *log_P, long int *seed, int *anc_seqs, int nsamples, int nSites, int nNodes, int condition_pairs);
void			SampleHiddenAncestralSequences(TreeNode **downPass, TreeNode *root, SecondStruct *SS, double *log_P,  double *parameters, int *structure, long int *seed, int *anc_seqs, int nsamples, int nSites, int nTaxa, int nNodes, int condition_pairs);
void			SetQMatrix(double *parameters);
void			SetDoubletQMatrix(double *parameters);
void			SetDoubletTransitionProbabilities(TreeNode **upPass, int nNodes);
void			SetHiddenDoubletTransitionProbabilities(TreeNode *p, double tprobs_rna[16][16], double lambda);
void			SetHiddenSingeltonTransitionProbabilities(TreeNode *p, double tprobs[4][4], double lambda);
void			SetSingeltonTransitionProbabilities(TreeNode **upPass, int nNodes);
void			SetTreeStructureToDefaults(TreeNode *Nodes, TreeNode **upPass, TreeNode **downPass, TreeNode *root, int nNodes, int nSites);
void			SetUpTree(TreeNode *Nodes, TreeNode **upPass, TreeNode **downPass, TreeNode *root,  TreeLabels *Names, char *s, int nTaxa);
void			ShowAncestralSequences(double *log_P, int *structure, int *anc_seqs, int num_rows, int num_cols);
void			ShowSecondaryStructure(int nSites, SecondStruct *SS);
void			SimulateHiddenAncestralSequences(TreeNode **downPass, TreeNode *root, SecondStruct *SS, double *log_P,  double *parameters, int *structure, long int *seed, int *anc_seqs, int nsamples, int nSites, int nTaxa, int nNodes, double lambda, int condition_pairs);
int			WhatChar(char c);
int			WhichDoublet(int one, int two);
int			WhichDoubleIsSmallest(double s1, double s2);
void			WhichNuc(int x);
void			WriteResultsToFile_New(TreeNode *Nodes, TreeNode **downPass, char *outName, double *log_P, int *structure, int *anc_seqs, int write_original_plus, TreeLabels *Names, int *dmatrix, int nSites, int nTaxa, int nsamples, double lambda, int is_harmonic);
void			WriteResultsToFile_Old(char *outName, double *log_P, int *structure, int *anc_seqs, int write_original_plus, TreeLabels *Names, int *dmatrix, int nSites, int nTaxa, int nsamples);
